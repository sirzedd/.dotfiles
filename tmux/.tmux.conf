set -ga terminal-overrides ",xterm-256color*:Tc"
set -s escape-time 0


# Improve colors
#set -g default-terminal 'screen-256color'

#Set scrollback buffer to 10000
set -g history-limit 10000

# customize the status line
set -g status-fg green
set -g status-bg black

# soften status bar colors
#set -g status-bg '#586e75'
#set -g status-fg '#eee8d5'k

# Enable mouse control (clickable windows, panes, resizable panes)
set -g mouse on

# remove administrative debris (session name, hostname, time) in status bar
 set -g status-left ''
 set -g status-right ''

# make scrolling with wheels work
#bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
#bind -n WheelDownPane select-pane -t= \; send-keys -M

# macOS only Mouse control https://unix.stackexchange.com/questions/318281/how-to-copy-and-paste-with-a-mouse-with-tmux
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down



# To copy, left click and drag to highlight text in yellow, 
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
setw -g mode-keys vi
set-window-option -g mode-keys vi

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
#bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# don't rename windows automatically
set-option -g allow-rename off

# renumber windows sequentially after closing any of them
set -g renumber-windows on


# Status Bar ---------------------
#
set -g status on

# ---Plugins---

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Save session using prefix + Ctrl-s so in my case Ctrl-a + Ctrl + s
set -g @plugin 'tmux-plugins/tmux-resurrect' # Restore previous sessions on reboot
# Resource with prefix + Ctrl-r
set -g @plugin 'tmux-plugins/tmux-continuum' # Restore previous sessions on reboot
set -g @plugin 'tmux-plugins/tmux-battery' #Show battery icon/status

# --Plugins setups --

set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '5'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session' #for Neo Vim
set -g @themepack 'double/green'

# ---Mappings---

# act like GNU screen
unbind C-b
set -g prefix C-a

# Reload tmux
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"


# Create new window
bind-key c new-window -c '#{pane_current_path}'

# Kill window with k
bind-key k confirm kill-window

# Splits panes using | and -
#bind | split-window -h
#bind - split-window -v
# Split panes using C-a h or C-a v
bind-key h split-window -v -c '#{pane_current_path}'
bind-key v split-window -h -c '#{pane_current_path}'
unbind '"'
unbind %


# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Change tmux copy and paste after ctrl+a + [ to v and y like vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Clear tmux screen with cmd-k
bind-key -r k send-keys -R \; clear-history

# Quick find window
bind-key -r f run-shell "tmux neww tmux-sessionizer.sh"

# Quick find personal snippets
bind-key -r S run-shell "tmux neww '. tmux-snippets.sh && rusty-snippets'"

# Specific folder start session
# bind-key -r W run-shell "tmux-sessionizer.sh ~/apps/testbed"

# Run cheatsheet
#bind-key -r i run-shell "tmux neww tmux-cht.sh"
bind-key -r i run-shell "tmux neww tmux-cht.sh"


# Clear history with ctrl-k
bind-key k send-keys -R \; clear-history

# To fix issues in tmux enviornment variables ran
# tmux setenv -g PATH "$PATH"  might need to make an alias that does this
# bind-key -r K  run-shell "echo $PATH | tr ':' '\n'"

#bind-key -r l run-shell "echo $TMUX"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
