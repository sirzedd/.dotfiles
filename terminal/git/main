addToPathFront $DOTFILES/terminal/git/bin

jib() {
  case $1 in

  commands) 
    # Would be nice to return list of supported commands to the zsh compdef
    echo "add push co cob stash undo delete diff"
    ;;
  push)
    fdone
    ;;
  status)
    git status -sb
    ;;
  ll) 
    git log --oneline
    ;;
  co)
    fco
    ;;
  cob)
    fcob
    ;;
  commit)
    # Would be nice if I could append the jira ticket on this somehow.  XXX-1232
    git commit -m "${@:2}"
    ;;
 stash) 
    fstash 
    ;;
  undo) 
    fundo
    ;;

  delete) 
    fdel 
    ;;

  diff) 
    gitdiff 
    ;;
  add)
    git add ${@:2}
    ;;
  # Way to easily checkout files that are in the status list to revert.  fzf to select multiple
  # Include easy git restore --staged .
  # Include merge and rebase(auto and one by one)
  # Convert to golang Command Pattern
  *) 
    echo "Unsupported command $1" 
    ;;


esac

}


# https://gist.github.com/dac09/97b9038e62299eed76ee18a782e3f3b9
# fbr - checkout git branch (including remote branches)
#fbr() {
#  local branches branch
#  branches=$(git branch --all | grep -v HEAD) &&
#  branch=$(echo "$branches" |
#           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
#  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
#}

# fco - checkout git branch/tag
#fco() {
#  local tags branches target
#  tags=$(
#    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
#  branches=$(
#    git branch --all | grep -v HEAD             |
#    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
#    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
#  target=$(
#    (echo "$tags"; echo "$branches") |
#    fzf-tmux -l100 -- --no-hscroll --ansi +m -d "\t" -n 2) || return
#  git checkout $(echo "$target" | awk '{print $2}')
#}

# fstash - easier way to deal with stashes
# type fstash to get a list of your stashes
# enter shows you the contents of the stash
# ctrl-d shows a diff of the stash against your current HEAD
# ctrl-b checks the stash out as a branch, for easier merging
#fstash() {
#  local out q k sha
#  while out=$(
#    git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
#    fzf --ansi --no-sort --query="$q" --print-query \
#        --expect=ctrl-d,ctrl-b);
#  do
#    mapfile -t out <<< "$out"
#    q="${out[0]}"
#    k="${out[1]}"
#    sha="${out[-1]}"
#    sha="${sha%% *}"
#    [[ -z "$sha" ]] && continue
#    if [[ "$k" == 'ctrl-d' ]]; then
#      git diff $sha
#    elif [[ "$k" == 'ctrl-b' ]]; then
#      git stash branch "stash-$sha" $sha
#      break;
#    else
#      git stash show -p $sha
#    fi
#  done
#}

#fdone() {
#  git push origin HEAD
#}
#
#fcob() {
# git checkout -b $1
#}
#
#fdel() {
#  git branch -D
#}
#
#fres() {
# git reset --hard
#}

